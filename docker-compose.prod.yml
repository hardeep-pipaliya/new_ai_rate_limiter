version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: ai_rate_limiter_postgres_prod
    environment:
      POSTGRES_DB: ai_rate_limiter
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ai_rate_limiter_network
    restart: unless-stopped

  # Redis
  redis:
    image: redis:7-alpine
    container_name: ai_rate_limiter_redis_prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai_rate_limiter_network
    restart: unless-stopped

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ai_rate_limiter_rabbitmq_prod
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-guest}
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ai_rate_limiter_network
    restart: unless-stopped

  # APISIX Gateway (Standalone Mode)
  apisix:
    image: apache/apisix:3.7.0-debian
    container_name: ai_rate_limiter_apisix_prod
    ports:
      - "9080:9080"
      - "9180:9180"
    environment:
      APISIX_STAND_ALONE: "true"
    volumes:
      - ./apisix_config/config.yaml:/usr/local/apisix/conf/config.yaml:ro
      - ./apisix_config/routes.yaml:/usr/local/apisix/conf/routes.yaml:ro
    networks:
      - ai_rate_limiter_network
    restart: unless-stopped

  # Flask Application
  flask_app:
    build: .
    container_name: ai_rate_limiter_app_prod
    ports:
      - "8501:8501"
    environment:
      - FLASK_APP=run.py
      - FLASK_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - APISIX_GATEWAY_URL=${APISIX_GATEWAY_URL}
      - APISIX_ADMIN_URL=${APISIX_ADMIN_URL}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - apisix
    networks:
      - ai_rate_limiter_network
    restart: unless-stopped

  # Celery Worker
  celery_worker:
    build: .
    container_name: ai_rate_limiter_worker_prod
    command: celery -A app.celery worker --loglevel=info --concurrency=4
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - APISIX_GATEWAY_URL=${APISIX_GATEWAY_URL}
      - APISIX_ADMIN_URL=${APISIX_ADMIN_URL}
    volumes:
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - rabbitmq
    networks:
      - ai_rate_limiter_network
    restart: unless-stopped

  # Celery Beat (Scheduler)
  celery_beat:
    build: .
    container_name: ai_rate_limiter_beat_prod
    command: celery -A app.celery beat --loglevel=info
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - postgres
      - redis
      - rabbitmq
      - apisix
    networks:
      - ai_rate_limiter_network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

networks:
  ai_rate_limiter_network:
    driver: bridge 